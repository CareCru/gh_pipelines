name: Create and Publish Docker Image

on:
  workflow_call:
    inputs:
      image_name:
        description: Name of container image without a tag
        required: true
        type: string
      environment:
        description: Name of Environment
        required: false
        type: string
      ecr_repo:
        description: Name of ECR repo used to store container images
        required: true
        type: string
      context:
        description: Context for where the Dockerfile exists
        type: string
        default: "."
      dockerfile:
        description: Dockerfile name
        type: string
        default: "Dockerfile"
      secret_name:
        description: AWS Secret Manger Secret Name
        type: string
      region:
        type: string
        default: "ca-central-1"
      submodules:
        type: boolean
        default: false
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      cicd_ssh_access_key:
        required: false
      pac:
        required: false
jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v3
        if: false == ${{inputs.submodules}}

      - uses: actions/checkout@v3
        if: ${{inputs.submodules}}
        with:
          submodules: 'recursive'
          token: ${{secrets.pac}}

      - id: var_set_outputs
        name: Set output values
        run: |
          echo "::set-output name=github_sha_tag::`echo ${GITHUB_SHA} | cut -c1-8`"
          echo "::set-output name=github_head_ref::`echo ${GITHUB_HEAD_REF} | awk -F '/' '{print $1}'`"
          echo "::set-output name=github_ref::`echo ${GITHUB_REF}`"
          echo "::set-output name=github_ref_name::`echo ${GITHUB_REF_NAME}`"
          echo "::set-output name=github_ref_type::`echo ${GITHUB_REF_TYPE}`"
          echo "::set-output name=github_repository::`echo ${GITHUB_REPOSITORY}`"

      - id: var_read_outputs
        name: Display output values
        run: |
          echo user_tag: ${{ steps.user_branch_tag.outputs.user_tag }}
          echo github_sha_tag: ${{ steps.var_set_outputs.outputs.github_sha_tag }}
          echo github_head_ref: ${{ steps.var_set_outputs.outputs.github_head_ref }}
          echo github_ref: ${{ steps.var_set_outputs.outputs.github_ref }}
          echo github_ref_name: ${{ steps.var_set_outputs.outputs.github_ref_name }}
          echo github_ref_type: ${{ steps.var_set_outputs.outputs.github_ref_type }}
          echo github_repository: ${{ steps.var_set_outputs.outputs.github_repository }}

      - id: short_sha
        name: Set short SHA
        run: |
          echo "::set-output name=tag::`echo ${GITHUB_SHA} | cut -c1-8`"
          
      - uses: webfactory/ssh-agent@v0.7.0
        with:
            ssh-private-key: ${{ secrets.cicd_ssh_access_key }}  
            
      - uses: aws-actions/configure-aws-credentials@v1
        name: Configure AWS Credentials
        with:
          aws-access-key-id: ${{secrets.aws_access_key_id}}
          aws-secret-access-key:  ${{secrets.aws_secret_access_key}}
          aws-region: ${{inputs.region}}

      - name: Read secrets from AWS Secrets Manager into environment variables
        uses: say8425/aws-secrets-manager-actions@v2
        with:
          AWS_ACCESS_KEY_ID: ${{secrets.aws_access_key_id}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.aws_secret_access_key}}
          AWS_DEFAULT_REGION: ${{inputs.region}}
          SECRET_NAME: build/${{inputs.environment}}/${{inputs.secret_name}}
          OUTPUT_PATH: '.env'


      - name: convert .env to new line list
        id: env_list_conversion
        run : |
          comma_separated_string=${{ steps.build_arg_list.outputs.env }}
          newline_delimited_string=$(echo "$comma_separated_string" | sed 's/,/\n/g')
          echo "::set-output name=list::`echo ${newline_delimited_string}`"
          echo "$newline_delimited_string"

      - name: Setup Build Arg List
        id: build_arg_list
        run : |
          echo "::set-output name=env::`awk '{print $1}' .env | paste -s -d, -`"


      - name: Setup BuildX
        uses: docker/setup-buildx-action@v1

      - uses: aws-actions/amazon-ecr-login@v1
        name: AWS ECR Login
        id: login-ecr

      - name: Verify Image
        id: verify_image
        run : |
          echo "::set-output name=exists::`docker manifest inspect ${{ steps.login-ecr.outputs.registry }}/${{inputs.image_name}}:${{ steps.short_sha.outputs.tag }} > /dev/null ; echo $?`"
          
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          ssh: |
            default=${{ env.SSH_AUTH_SOCK }}
          load: true
          context: ${{inputs.context}}
          file: ${{inputs.dockerfile}}
          platforms: linux/amd64
          build-args: ${{ steps.env_list_conversion.outputs.list }}
          imageName:  ${{ steps.login-ecr.outputs.registry }}/${{inputs.image_name}}
          tags: ${{inputs.environment}}_${{ steps.short_sha.outputs.tag }}
