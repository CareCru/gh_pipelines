name: Builds and uploads MFE artifacts

on:
  workflow_call:
    inputs:
      service_name:
        description: Name of the service
        required: true
        type: string
      environment:
        description: Name of Environment
        required: true
        type: string
      region:
        type: string
        default: "ca-central-1"
      submodules:
        type: boolean
        default: false
      frontend_dir:
        type: string
        default: "web"
      secret_name:
        description: AWS Secret Manger Secret Name
        type: string
      process_env_ci:
        description: Sets env var CI var to let build commands know this is a CI environment
        type: boolean
        default: true
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      pac:
        required: false
jobs:
  build:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
        if: false == ${{inputs.submodules}}

      - uses: actions/checkout@v3
        if: ${{inputs.submodules}}
        with:
          submodules: 'recursive'
          token: ${{secrets.pac}}

      - uses: aws-actions/configure-aws-credentials@v1
        name: Configure AWS Credentials
        with:
          aws-access-key-id: ${{secrets.aws_access_key_id}}
          aws-secret-access-key:  ${{secrets.aws_secret_access_key}}
          aws-region: ${{ inputs.region }}

      - name: Read secrets from AWS Secrets Manager into environment variables
        uses: say8425/aws-secrets-manager-actions@v2
        with:
          AWS_ACCESS_KEY_ID: ${{secrets.aws_access_key_id}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.aws_secret_access_key}}
          AWS_DEFAULT_REGION: ${{inputs.region}}
          SECRET_NAME: build/${{inputs.environment}}/${{inputs.secret_name}}
          OUTPUT_PATH: ${{inputs.frontend_dir}}/.env

      - id: create_rc_files
        name: Create RC files
        working-directory: ${{inputs.frontend_dir}}
        run: |
          cat <<< "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .yarnrc
          cat <<< "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
          cat <<< "@fortawesome:registry=https://npm.fontawesome.com/" >> .npmrc
          cat <<< "//npm.fontawesome.com/:_authToken=$FORT_AWESOME_NPM_TOKEN" >> .npmrc

      - name: Install Yarn
        run: |
          sudo apt-key adv --fetch-keys https://dl.yarnpkg.com/debian/pubkey.gpg
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
          sudo apt-get update
          sudo apt-get install -y yarn
        

      - id: setup_node
        uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: 'yarn'
          cache-dependency-path: ${{inputs.frontend_dir}}/yarn.lock

      - name: yarn
        uses: borales/actions-yarn@v4.2.0
        with:
          cmd: install
          dir: ${{inputs.frontend_dir}}
            
      - name: yarn_build
        uses: borales/actions-yarn@v4.2.0
        with:
          cmd: build
          dir: ${{inputs.frontend_dir}}
        env:
          CI: ${{inputs.process_env_ci}}


      - id: short_sha
        name: Set Short SHA as var output
        run: |
          echo "::set-output name=tag::`echo ${GITHUB_SHA} | cut -c1-8`"

      # Step needed for downloading current task def.
      - name: Install AWS CLI Tools
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      # replaces microFrontendArtifactUpload
      - id: s3_upload_artifacts
        name: Upload artifacts to S3
        working-directory: ${{inputs.frontend_dir}}/build
        run: |
          aws s3 cp . s3://micro-frontend-artifacts/${{inputs.service_name}}/${{inputs.environment}}/${{steps.short_sha.outputs.tag}} --recursive --metadata commit=${{steps.short_sha.outputs.tag}}
          aws s3 sync . s3://micro-frontend-artifacts/${{inputs.service_name}}/${{inputs.environment}}/${{steps.short_sha.outputs.tag}} --delete
