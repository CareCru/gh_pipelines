name: Create and Publish Docker Image

on:
  workflow_call:
    inputs:
      image_name:
        description: Name of container image without a tag
        required: true
        type: string
      environment:
        description: Name of Environment
        required: false
        type: string
      ecr_repo:
        description: Name of ECR repo used to store container images
        required: true
        type: string
      context:
        description: Context for where the Dockerfile exists
        type: string
        default: "."
      dockerfile:
        description: Dockerfile name
        type: string
        default: "Dockerfile"
      secret_name:
        description: AWS Secret Manger Secret Name
        type: string
      region:
        type: string
        default: "ca-central-1"
      submodules:
        type: boolean
        default: false
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      cicd_ssh_access_key:
        required: false
      pac:
        required: false
jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v3
        if: false == ${{inputs.submodules}}

      - uses: actions/checkout@v3
        if: ${{inputs.submodules}}
        with:
          submodules: 'recursive'
          token: ${{secrets.pac}}

      - id: short_sha
        name: Set short SHA
        run: |
          echo "::set-output name=tag::`echo ${GITHUB_SHA} | cut -c1-8`"
          
      - id: ssh_key
        name: Output SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.cicd_ssh_access_key }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          
      - uses: aws-actions/configure-aws-credentials@v1
        name: Configure AWS Credentials
        with:
          aws-access-key-id: ${{secrets.aws_access_key_id}}
          aws-secret-access-key:  ${{secrets.aws_secret_access_key}}
          aws-region: ${{inputs.region}}
          
      - name: Setup BuildX
        uses: docker/setup-buildx-action@v1

      - uses: aws-actions/amazon-ecr-login@v1
        name: AWS ECR Login
        id: login-ecr
        
      - name: Read secrets from AWS Secrets Manager into environment variables
        uses: say8425/aws-secrets-manager-actions@v2
        with:
          AWS_ACCESS_KEY_ID: ${{secrets.aws_access_key_id}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.aws_secret_access_key}}
          AWS_DEFAULT_REGION: ${{inputs.region}}
          SECRET_NAME: build/${{inputs.environment}}/${{inputs.secret_name}}
          OUTPUT_PATH: '.env'
          
      - name: Extract ticket from branch name
        id: extract_ticket
        run: |
          BRANCH_NAME=${{ github.head_ref }}
          TICKET=$(echo $BRANCH_NAME | cut -d/ -f1)
          echo "::set-output name=ticket::$TICKET"
          
      - name: Fetch main branch
        run: |
          git fetch origin main:main

      - name: Get short SHA of HEAD commit
        run: echo "HEAD_SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Get short SHA of upcoming merge commit
        id: merge_base
        run: |
          # The short SHA of the merge commit can be calculated in advance because it's deterministic.
          git fetch origin main:main
          git branch # debug: list all local branches
          git log --oneline main # debug: print recent commits in main
          MERGE_BASE=$(git merge-base HEAD main)
          if [ -z "$MERGE_BASE" ]; then
            echo "Error: Could not determine merge base of HEAD and main"
            exit 1
          fi
          echo "MERGE_BASE_SHORT_SHA=$(git rev-parse --short $MERGE_BASE)" >> $GITHUB_ENV


      - name: Generate Docker Image Metadata
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.image_name }}
          tags: |
            type=raw,value=pr-${{ github.event.number }},enable=${{ github.event_name == 'pull_request' }},prefix=${{ inputs.environment }}-
            type=raw,value=${{ steps.extract_ticket.outputs.ticket }},enable=${{ github.event_name == 'pull_request' }},prefix=${{ inputs.environment }}-
            type=raw,value=${{ env.HEAD_SHORT_SHA }},enable=${{ github.event_name == 'pull_request' }},prefix=${{ inputs.environment }}-
            type=raw,value=${{ env.MERGE_BASE_SHORT_SHA }},enable=${{ github.event_name == 'pull_request' }},prefix=${{ inputs.environment }}-
            type=ref,event=branch,prefix=${{ inputs.environment }}-
            type=ref,event=pr,prefix=${{ inputs.environment }}-
            type=semver,pattern={{version}},prefix=${{ inputs.environment }}-
            type=semver,pattern={{major}}.{{minor}},prefix=${{ inputs.environment }}-
            type=ref,event=tag,prefix=${{ inputs.environment }}-
            type=sha,prefix=${{ inputs.environment }}-,suffix=,format=short


#       - name: Generate Docker Image Metadata
#         id: meta
#         uses: docker/metadata-action@v4.3.0
#         with:
#           images: ${{ steps.login-ecr.outputs.registry }}/${{inputs.image_name}}
#           tags: |
#             type=raw,value=pr-${{ github.event.number }},enable=${{ github.event_name == 'pull_request' }},prefix=${{inputs.environment}}-
#             type=raw,value=${{ steps.extract_ticket.outputs.ticket }},enable=${{ github.event_name == 'pull_request' }},prefix=${{inputs.environment}}-
#             type=ref,event=branch,prefix=${{inputs.environment}}-
#             type=ref,event=pr,prefix=${{inputs.environment}}-
#             type=semver,pattern={{version}},prefix=${{inputs.environment}}-
#             type=semver,pattern={{major}}.{{minor}},prefix=${{inputs.environment}}-
#             type=ref,event=tag,prefix=${{inputs.environment}}-
#             type=sha,prefix=${{inputs.environment}}-,suffix=,format=short
            
      - name: Set Build Arguments
        id: build_arg_var
        run: |
          BUILD_ARGS=$(cat .env)
          echo "BUILD_ARGS<<EOF" >> $GITHUB_ENV
          echo "$BUILD_ARGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          push: true
          pull: true
          context: ${{inputs.context}}
          file: ${{inputs.dockerfile}}
          platforms: linux/amd64
          build-args: ${{ env.BUILD_ARGS }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

