name: Create and Publish Docker Image

on:
  workflow_call:
    inputs:
      image_name:
        description: Name of container image without a tag
        required: true
        type: string
      ecr_repo:
        description: Name of ECR repo used to store container images
        required: true
        type: string
      context:
        type: string
        default: "."
      dockerfile:
        description: Dockerfile name
        type: string
        default: "Dockerfile"
      region:
        type: string
        default: "ca-central-1"
      submodules:
        type: boolean 
        default: false
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      cicd_ssh_access_key:
        required: false
      pac:
        required: false
jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v3
        if: false == ${{inputs.submodules}}
      
      - uses: actions/checkout@v3
        if: ${{inputs.submodules}}
        with:
          submodules: 'recursive'
          token: ${{secrets.pac}}
          
      - id: var_set_outputs
        name: Set output values
        run: |
          echo "::set-output name=github_sha_tag::`echo ${GITHUB_SHA} | cut -c1-8`"
          echo "::set-output name=github_head_ref::`echo ${GITHUB_HEAD_REF} | awk -F '/' '{print $1}'`"
          echo "::set-output name=github_ref::`echo ${GITHUB_REF}`"
          echo "::set-output name=github_ref_name::`echo ${GITHUB_REF_NAME}`"
          echo "::set-output name=github_ref_type::`echo ${GITHUB_REF_TYPE}`"
          echo "::set-output name=github_repository::`echo ${GITHUB_REPOSITORY}`"

      - id: var_read_outputs
        name: display output values
        run: |
          echo github_sha_tag: ${{ steps.var_set_outputs.outputs.github_sha_tag }}
          echo github_head_ref: ${{ steps.var_set_outputs.outputs.github_head_ref }}
          echo github_ref: ${{ steps.var_set_outputs.outputs.github_ref }}
          echo github_ref_name: ${{ steps.var_set_outputs.outputs.github_ref_name }}
          echo github_ref_type: ${{ steps.var_set_outputs.outputs.github_ref_type }}
          echo github_repository: ${{ steps.var_set_outputs.outputs.github_repository }}

      - id: short_sha
        name: Set Short SHA
        run: |
          echo "::set-output name=tag::`echo ${GITHUB_SHA} | cut -c1-8`"

      - uses: aws-actions/configure-aws-credentials@v1
        name: Configure AWS Credentials
        with:
          aws-access-key-id: ${{secrets.aws_access_key_id}}
          aws-secret-access-key:  ${{secrets.aws_secret_access_key}}
          aws-region: ${{inputs.region}}
          
      - id: ssh_key
        name: Output SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.cicd_ssh_access_key }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          ENV GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa"
          
      - name: Read secrets from AWS Secrets Manager into environment variables
        uses: say8425/aws-secrets-manager-actions@v2
        with:
          AWS_ACCESS_KEY_ID: ${{secrets.aws_access_key_id}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.aws_secret_access_key}}
          AWS_DEFAULT_REGION: ${{inputs.region}}
          SECRET_NAME: build/generic/npm_tokens
          OUTPUT_PATH: '.env'

      - name: Setup Build Arg List
        id: build_arg_list
        run : |
          echo "::set-output name=env::`awk '{print $1}' .env | paste -s -d, -`"

      - name: Setup BuildX
        uses: docker/setup-buildx-action@v1

      - uses: aws-actions/amazon-ecr-login@v1
        name: AWS ECR Login
        id: login-ecr

      - name: Verify Image
        id: verify_image
        run : |
          echo "::set-output name=exists::`docker manifest inspect ${{ steps.login-ecr.outputs.registry }}/${{inputs.image_name}}:${{inputs.environment}}_${{ steps.short_sha.outputs.tag }} > /dev/null ; echo $?`"

      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key: ${{inputs.image_name}}-docker-cache-{hash}
          restore-keys: |
            ${{inputs.image_name}}-docker-cache-

      - name: Build image
        uses: ilteoood/docker_buildx@master
        if: steps.verify_image.outputs.exists == 1
        with:
          publish: false # build done in next step to have multiple tags
          load: true
          platform: linux/amd64
          buildArg: ${{ steps.build_arg_list.outputs.env }}
          imageName:  ${{ steps.login-ecr.outputs.registry }}/${{inputs.image_name}}
          tag: ${{ steps.short_sha.outputs.tag }}
          context: ${{inputs.context}}
          dockerFile: ${{inputs.dockerfile}}

      - name: Tag and Push
        id: push_image_ecr
        run : |
          ## Set Tags
          TAG1="${{ steps.login-ecr.outputs.registry }}/${{inputs.image_name}}:${{ steps.var_set_outputs.outputs.github_head_ref }}"
          TAG2="${{ steps.login-ecr.outputs.registry }}/${{inputs.image_name}}:${{ steps.var_set_outputs.outputs.github_ref_name }}"
          TAG3="${{ steps.login-ecr.outputs.registry }}/${{inputs.image_name}}:latest"

          ## If image was already built, pull the image based on SHA tag
          if [ ${{ steps.verify_image.outputs.exists }} == '0' ] ; then docker pull ${{ steps.login-ecr.outputs.registry }}/${{inputs.image_name}}:${{ steps.short_sha.outputs.tag }} ; fi

          ## If github_head_ref is not set then don't create tag
          if [ -z "${{ steps.var_set_outputs.outputs.github_head_ref }}" ] ; then echo "skip"; else docker tag ${{ steps.login-ecr.outputs.registry }}/${{inputs.image_name}}:${{ steps.short_sha.outputs.tag }}  $TAG1; fi

          ## Tag with github ref name, if tag has chars that break the command exit successfully to not break workflow
          docker tag ${{ steps.login-ecr.outputs.registry }}/${{inputs.image_name}}:${{ steps.short_sha.outputs.tag }}  $TAG2 || true

          ## Tag with latest
          docker tag ${{ steps.login-ecr.outputs.registry }}/${{inputs.image_name}}:${{ steps.short_sha.outputs.tag }}  $TAG3

          ## Push all tags to registry
          docker push --all-tags ${{ steps.login-ecr.outputs.registry }}/${{inputs.image_name}}
