# This is a basic workflow to help you get started with Actions
name: Deploy to ECS

# Controls when the action will run. 
on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Where to Release: dev | test | demo | prod(must be release branch)?'
        required: true
        default: 'dev'
jobs:
  # This workflow contains multiple deploy jobs based on the input given
  # As this pulls the image based on Short SHA if no such image has been
  # built then the job will fail. 
  dev:
    if: github.event.inputs.releaseType == 'dev'
    # The type of runner that the job will run on
    # This runner is self-hosted in the Dev Kubernetes Cluster
    runs-on: self-hosted

    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        name: Configure AWS Credentials
        with: 
          aws-access-key-id: ${{secrets.GITHUBACTIONS_AWS_ACCESS_KEY}}
          aws-secret-access-key:  ${{secrets.GITHUBACTIONS_AWS_SECRET_ACCESS_KEY}}
          aws-region: ca-central-1

      # ECR Login, depends on AWS Creds
      - uses: aws-actions/amazon-ecr-login@v1
        name: AWS ECR Login
        id: login-ecr
      # Create Short SHA variable, used for tagging images
      - name: Add SHORT_SHA env property with commit short sha
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      # Grab the image registry/repo:tag as a variable derived from this job
      # Job initially checks to confirm image is available
      - name: Set Container Image Name
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: waitlist
        run: |
          # docker manifest inspect $ECR_REGISTRY/$ECR_REPOSITORY:DEV_$SHORT_SHA > /dev/null ; echo $?
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:DEV_$SHORT_SHA"

      # Step needed for downloading current task def.
      - name: Install AWS CLI Tools
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2

      - name: Grab Live Task_Definition
        env:
          environment: dev
          appName: waitlist
          aws-access-key-id: ${{secrets.GITHUBACTIONS_AWS_ACCESS_KEY}}
          aws-secret-access-key:  ${{secrets.GITHUBACTIONS_AWS_SECRET_ACCESS_KEY}}
          aws-region: ca-central-1
        run: |
          echo "" > task_def.json
          until  grep "family" task_def.json
          do
              aws ecs describe-task-definition --task-definition ${environment}-${appName} | jq .taskDefinition | jq "del(.taskDefinitionArn,.requiresAttributes,.revision, .status, .requiresAttributes, .compatibilities)" > task_def.json
              sleep 2
          done

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task_def.json
          container-name: dev-waitlist  
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: dev-waitlist
          cluster: dev-ecs-cluster
          wait-for-service-stability: true

  test:
    if: github.event.inputs.releaseType == 'test'
    runs-on: self-hosted

    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        name: Configure AWS Credentials
        with: 
          aws-access-key-id: ${{secrets.GITHUBACTIONS_AWS_ACCESS_KEY}}
          aws-secret-access-key:  ${{secrets.GITHUBACTIONS_AWS_SECRET_ACCESS_KEY}}
          aws-region: ca-central-1

      - uses: aws-actions/amazon-ecr-login@v1
        name: AWS ECR Login
        id: login-ecr

      - name: Add SHORT_SHA env property with commit short sha
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      - name: Set Container Image Name
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: waitlist
        run: |
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:TEST_$SHORT_SHA"

      - name: Install AWS CLI Tools
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2

      - name: Grab Live Task_Definition
        env:
          environment: test
          appName: waitlist
          aws-access-key-id: ${{secrets.GITHUBACTIONS_AWS_ACCESS_KEY}}
          aws-secret-access-key:  ${{secrets.GITHUBACTIONS_AWS_SECRET_ACCESS_KEY}}
          aws-region: ca-central-1
        run: |
          echo "" > task_def.json
          until  grep "family" task_def.json
          do
              aws ecs describe-task-definition --task-definition ${environment}-${appName} | jq .taskDefinition | jq "del(.taskDefinitionArn,.requiresAttributes,.revision, .status, .requiresAttributes, .compatibilities)" > task_def.json
              sleep 2
          done

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1

        with:
          task-definition: task_def.json
          container-name: test-waitlist  
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1

        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: test-waitlist
          cluster: test-ecs-cluster
          wait-for-service-stability: true

  demo:
    if: github.event.inputs.releaseType == 'demo'
    runs-on: self-hosted

    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        name: Configure AWS Credentials
        with: 
          aws-access-key-id: ${{secrets.GITHUBACTIONS_AWS_ACCESS_KEY}}
          aws-secret-access-key:  ${{secrets.GITHUBACTIONS_AWS_SECRET_ACCESS_KEY}}
          aws-region: ca-central-1

      - uses: aws-actions/amazon-ecr-login@v1
        name: AWS ECR Login
        id: login-ecr

      - name: Add SHORT_SHA env property with commit short sha
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      - name: Set Container Image Name
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: waitlist
        run: |
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:DEMO_$SHORT_SHA"

      - name: Install AWS CLI Tools
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2

      - name: Grab Live Task_Definition
        env:
          environment: demo
          appName: waitlist
          aws-access-key-id: ${{secrets.GITHUBACTIONS_AWS_ACCESS_KEY}}
          aws-secret-access-key:  ${{secrets.GITHUBACTIONS_AWS_SECRET_ACCESS_KEY}}
          aws-region: ca-central-1
        run: |
          echo "" > task_def.json
          until  grep "family" task_def.json
          do
              aws ecs describe-task-definition --task-definition ${environment}-${appName} | jq .taskDefinition | jq "del(.taskDefinitionArn,.requiresAttributes,.revision, .status, .requiresAttributes, .compatibilities)" > task_def.json
              sleep 2
          done

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1

        with:
          task-definition: task_def.json
          container-name: demo-waitlist  
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1

        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: demo-waitlist
          cluster: demo-ecs-cluster
          wait-for-service-stability: true


  prod:
    if: github.event.inputs.releaseType == 'prod' || 
        (github.ref == 'refs/heads/release')

    runs-on: self-hosted

    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        name: Configure AWS Credentials
        with: 
          aws-access-key-id: ${{secrets.GITHUBACTIONS_AWS_ACCESS_KEY}}
          aws-secret-access-key:  ${{secrets.GITHUBACTIONS_AWS_SECRET_ACCESS_KEY}}
          aws-region: ca-central-1

      - uses: aws-actions/amazon-ecr-login@v1
        name: AWS ECR Login
        id: login-ecr

      - name: Add SHORT_SHA env property with commit short sha
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      - name: Set Container Image Name
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: waitlist
        run: |
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:PROD_$SHORT_SHA"

      - name: Install AWS CLI Tools
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2

      - name: Grab Live Task_Definition
        env:
          environment: prod
          appName: waitlist
          aws-access-key-id: ${{secrets.GITHUBACTIONS_AWS_ACCESS_KEY}}
          aws-secret-access-key:  ${{secrets.GITHUBACTIONS_AWS_SECRET_ACCESS_KEY}}
          aws-region: ca-central-1
        run: |
          echo "" > task_def.json
          until  grep "family" task_def.json
          do
              aws ecs describe-task-definition --task-definition ${environment}-${appName} | jq .taskDefinition | jq "del(.taskDefinitionArn,.requiresAttributes,.revision, .status, .requiresAttributes, .compatibilities)" > task_def.json
              sleep 2
          done

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1

        with:
          task-definition: task_def.json
          container-name: prod-waitlist  
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1

        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: prod-waitlist
          cluster: prod-ecs-cluster
          wait-for-service-stability: true
